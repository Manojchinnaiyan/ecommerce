# Generated by Django 4.2.7 on 2025-03-01 06:33

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('products', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='SearchQuery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query_text', models.CharField(max_length=255)),
                ('session_id', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('results_count', models.PositiveIntegerField(default=0)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='search_queries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Search Queries',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RecommendationEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(blank=True, max_length=255, null=True)),
                ('event_type', models.CharField(choices=[('impression', 'Impression'), ('click', 'Click')], max_length=20)),
                ('source', models.CharField(help_text='Source of recommendation (e.g., similar_products, recently_viewed)', max_length=50)),
                ('position', models.PositiveSmallIntegerField(help_text='Position in recommendation list')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendation_events', to='products.product')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(blank=True, max_length=255, null=True)),
                ('viewed_at', models.DateTimeField(auto_now_add=True)),
                ('viewed_from_search', models.BooleanField(default=False)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='views', to='products.product')),
                ('search_query', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='product_views', to='search.searchquery')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-viewed_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductSimilarity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('similarity_score', models.FloatField(help_text='Similarity score between products (0-1)')),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('product_a', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similarities_as_a', to='products.product')),
                ('product_b', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similarities_as_b', to='products.product')),
            ],
            options={
                'ordering': ['-similarity_score'],
                'unique_together': {('product_a', 'product_b')},
            },
        ),
    ]
